name: Build Tauri App (Cross-Platform)

on:
  push:
    branches: [master]
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13, windows-latest, ubuntu-22.04]
    env:
      MESHFIX_SRC: ${{ github.workspace }}/src-tauri/dependencies/meshfix
      MESHFIX_OUT: ${{ github.workspace }}/src-tauri/dependencies/meshfix/bin64
    steps:
      - uses: actions/checkout@v4
        with:
            submodules: 'recursive'
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2

      # Linux MeshFix build
      - name: Setup Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update 
          sudo apt-get install -y build-essential cmake g++ libeigen3-dev libglib2.0-dev libgtk-3-dev libsoup-3.0-dev javascriptcoregtk-4.1-dev webkit2gtk-4.1-dev pkg-config 
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Build MeshFix (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p $MESHFIX_SRC/build
          cd $MESHFIX_SRC/build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          cmake --build . --config Release
          mkdir -p $MESHFIX_OUT/linux
          cp $MESHFIX_OUT/libmeshfix.so $MESHFIX_OUT/linux/libmeshfix.so

      # macOS MeshFix build
      - name: Build MeshFix (macOS)
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          mkdir -p $MESHFIX_SRC/build
          cd $MESHFIX_SRC/build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          cmake --build . --config Release
          mkdir -p $MESHFIX_OUT/macos
          cp $MESHFIX_OUT/libmeshfix.dylib $MESHFIX_OUT/macos/libmeshfix.dylib
          install_name_tool -id "@executable_path/../Frameworks/libmeshfix.dylib" $MESHFIX_OUT/macos/libmeshfix.dylib

      # Windows MeshFix build
      - name: Build MeshFix (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          mkdir $env:MESHFIX_SRC\build
          cd $env:MESHFIX_SRC\build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          cmake --build . --config Release
          mkdir $env:MESHFIX_OUT\windows
          Copy-Item $env:MESHFIX_SRC\build\Release\meshfix.dll $env:MESHFIX_OUT\windows\meshfix.dll
          Copy-Item $env:MESHFIX_SRC\build\Release\meshfix.lib $env:MESHFIX_OUT\windows\meshfix.lib
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install frontend dependencies
        run: bun install
      - name: Install Tauri CLI
        run: bun install -g @tauri-apps/cli

      - name: Package Tauri app
        run: bun run tauri build

      - name: Upload Tauri bundle (as workflow artifact)
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-bundle-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/

      - name: Upload Tauri bundle to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            src-tauri/target/release/bundle/**/*